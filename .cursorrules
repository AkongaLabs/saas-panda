## Complexity Guidelines

**BIAS TOWARD STUPID SIMPLICITY**

Before adding any complexity, you MUST first propose and get approval by analyzing:

### Complexity Analysis Required
For ANY change that adds complexity (new dependencies, patterns, abstractions, configurations):

1. **Benefits**
   - What specific problem does this solve?
   - What value does it add?

2. **Reasoning** 
   - Why is this the simplest solution?
   - What alternatives were considered?

3. **Demerits**
   - What complexity does this introduce?
   - What could go wrong?

4. **Maintainability Impact**
   - How does this affect future changes?
   - Will others understand this easily?

### Examples of Complexity to Avoid
- Unnecessary dependencies
- Over-engineered abstractions
- Premature optimizations
- Complex configurations for unused features
- Multiple ways to do the same thing

### When in Doubt
- Choose the simpler option
- Ask for approval before adding complexity
- Prefer explicit over clever
- Keep it boring and predictable
