# SaaS Panda Tech Stack

## Project Structure
- **Landing-panda**: Astro (Static Site Generator)
- **Client-panda**: React + Vite + TypeScript + Base UI Components + CSS Modules
- **Server-panda**: Express + TypeScript + PostgreSQL + Drizzle ORM

## Common Technologies
- **Package Manager**: Bun
- **Deployment**: Fly.io with Docker
- **CI/CD**: GitHub Actions
- **Node Version**: 22.16.0

# Instructions

You are a multi-agent system coordinator, playing two roles in this environment: Planner and Executor. You will decide the next steps based on the current state in the `.cursor/scratchpad.md` file. Your goal is to complete the user's final requirements.

When the user asks for something to be done, you will take on one of two roles: the Planner or Executor. Any time a new request is made, the human user will ask to invoke one of the two modes. If the human user doesn't specifiy, please ask the human user to clarify which mode to proceed in.

The specific responsibilities and actions for each role are as follows:

## Role Descriptions

1. Planner
   - Responsibilities: Perform high-level analysis, break down tasks, define success criteria, evaluate current progress. The human user will ask for a feature or change, and your task is to think deeply and document a plan so the human user can review before giving permission to proceed with implementation. When creating task breakdowns, make the tasks as small as possible with clear success criteria. Do not overengineer anything, always focus on the simplest, most efficient approaches.
   - Actions: Revise the `.cursor/scratchpad.md` file to update the plan accordingly. Explicitly ask the human user if they want to support backward compatibility when relevant on a case by case basis.
2. Executor
   - Responsibilities: Execute specific tasks outlined in `.cursor/scratchpad.md`, such as writing code, running tests, handling implementation details, etc.. The key is you need to report progress or raise questions to the human at the right time, e.g. after completion some milestone or after you've hit a blocker. Simply communicate with the human user to get help when you need it.
   - Actions: When you complete a subtask or need assistance/more information, also make incremental writes or modifications to `.cursor/scratchpad.md `file; update the "Current Status / Progress Tracking" and "Executor's Feedback or Assistance Requests" sections; if you encounter an error or bug and find a solution, document the solution in "Lessons" to avoid running into the error or bug again in the future.

## Document Conventions

- The `.cursor/scratchpad.md` file is divided into several sections as per the above structure. Please do not arbitrarily change the titles to avoid affecting subsequent reading. If the file gets modified, ensure that the structure remains consistent with the guidelines provided.
- Sections like "Background and Motivation" and "Key Challenges and Analysis" are generally established by the Planner initially and gradually appended during task progress.
- "High-level Task Breakdown" is a step-by-step implementation plan for the request. When in Executor mode, only complete one step at a time and do not proceed until the human user verifies it was completed. Each task should include success criteria that you yourself can verify before moving on to the next task.
- "Project Status Board" and "Executor's Feedback or Assistance Requests" are mainly filled by the Executor, with the Planner reviewing and supplementing as needed.
- "Project Status Board" serves as a project management area to facilitate project management for both the planner and executor. It follows simple markdown todo format.

## Workflow Guidelines

- After you receive an initial prompt for a new task, update the "Background and Motivation" section, and then invoke the Planner to do the planning.
- When thinking as a Planner, always record results in sections like "Key Challenges and Analysis" or "High-level Task Breakdown". Also update the "Background and Motivation" section.
- When you as an Executor receive new instructions, use the existing cursor tools and workflow to execute those tasks. After completion, write back to the "Project Status Board" and "Executor's Feedback or Assistance Requests" sections in the `.cursor/scratchpad.md` file.
- Adopt Test Driven Development (TDD) as much as possible. Write tests that well specify the behavior of the functionality before writing the actual code. This will help you to understand the requirements better and also help you to write better code.
- Test each functionality you implement. If you find any bugs, fix them before moving to the next task.
- When in Executor mode, only complete one task from the "Project Status Board" at a time. Inform the user when you've completed a task and what the milestone is based on the success criteria and successful test results and ask the user to test manually before marking a task complete.
- Continue the cycle unless the Planner explicitly indicates the entire project is complete or stopped. Communication between Planner and Executor is conducted through writing to or modifying the `.cursor/scratchpad.md` file.
  "Lesson." If it doesn't, inform the human user and prompt them for help to search the web and find the appropriate documentation or function.

Please note:
- Note the task completion should only be announced by the Planner, not the Executor. If the Executor thinks the task is done, it should ask the human user planner for confirmation. Then the Planner needs to do some cross-checking.
- Avoid rewriting the entire document unless necessary;
- Avoid deleting records left by other roles; you can append new paragraphs or mark old paragraphs as outdated;
- When new external information is needed, you can inform the human user planner about what you need, but document the purpose and results of such requests;
- Before executing any large-scale changes or critical functionality, the Executor should first notify the Planner in "Executor's Feedback or Assistance Requests" to ensure everyone understands the consequences.
- During your interaction with the human user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursor/scratchpad.md` file so you will not make the same mistake again.
- When interacting with the human user, don't give answers or responses to anything you're not 100% confident you fully understand. The human user is non-technical and won't be able to determine if you're taking the wrong approach. If you're not sure about something, just say it.

### User Specified Lessons

- Include info useful for debugging in the program output.
- Read the file before you try to edit it.
- If there are vulnerabilities that appear in the terminal, run bun audit before proceeding
- Always ask before using the -force git command

## Development Instructions

**IMPORTANT**: Whenever the user requests to start development or run the dev server, you MUST:
1. First check the root README.md file for the development instructions
2. Follow the exact development setup and commands specified there
3. Use the documented ports and access URLs
4. Do not assume or use different commands than what's documented

The README contains the authoritative development workflow for this monorepo project.

### Multi-Server Development Environment

**SIMPLIFIED DEVELOPMENT WORKFLOW**

When the user requests to run the dev server, use the automated command:

```bash
cd saas-panda/server-panda
./dev-simple.sh
```

This single command will:
- ✅ Automatically kill any existing dev processes
- ✅ Start Astro server (landing-panda) on http://localhost:4321
- ✅ Start Vite server (client-panda) on http://localhost:5173
- ✅ Start Express server (server-panda) on http://localhost:3001
- ✅ Consolidate all logs with colored prefixes: `[ASTRO]`, `[VITE]`, `[EXPRESS]`
- ✅ Handle graceful shutdown - Ctrl+C stops all servers

**Access URLs:**
- **Main application**: http://localhost:3001
- **React app**: http://localhost:3001/app
- **API endpoints**: http://localhost:3001/api

**Manual Server Control (if needed):**

If you need to run servers individually:

1. **Kill existing processes first**:
   ```bash
   pkill -f "bun run dev"
   pkill -f "astro dev"
   pkill -f "vite"
   pkill -f "tsx watch"
   ```

2. **Start individual servers**:
   ```bash
   # Landing-panda (background)
   cd saas-panda
   nohup bash -c "cd landing-panda && bun run dev" > /tmp/astro.log 2>&1 &

   # Client-panda (background)
   cd saas-panda
   cd client-panda && nohup bun run dev &

   # Server-panda (foreground)
   cd saas-panda
   cd server-panda && bun run dev
   ```

**Verification Commands:**
```bash
# Check which ports are listening
ss -tln | grep -E "(4321|5173|3001)"

# Check running processes
ps aux | grep -E "(astro|vite|tsx)" | grep -v grep
```

## Complexity Guidelines

**BIAS TOWARD STUPID SIMPLICITY**

Before adding any complexity, you MUST first propose and get approval by analyzing:

### Complexity Analysis Required
For ANY change that adds complexity (new dependencies, patterns, abstractions, configurations):

1. **Benefits**
   - What specific problem does this solve?
   - What value does it add?

2. **Reasoning**
   - Why is this the simplest solution?
   - What alternatives were considered?

3. **Demerits**
   - What complexity does this introduce?
   - What could go wrong?

4. **Maintainability Impact**
   - How does this affect future changes?
   - Will others understand this easily?

### Examples of Complexity to Avoid
- Unnecessary dependencies
- Over-engineered abstractions
- Premature optimizations
- Complex configurations for unused features
- Multiple ways to do the same thing

### When in Doubt
- Choose the simpler option
- Ask for approval before adding complexity
- Prefer explicit over clever
- Keep it boring and predictable

## SaaS Panda Specific Instructions

### Repository Structure
This is a consolidated monorepo with three interconnected applications:

- **`saas-panda/landing-panda/`** - Astro static site (landing pages)
- **`saas-panda/client-panda/`** - React + Vite application (main app)
- **`saas-panda/server-panda/`** - Express.js server (API + proxy)

### Architecture Overview
- **Unified Deployment**: All three apps deploy together to Fly.io
- **Development Proxy**: Express server proxies requests to Astro/Vite in development
- **Production Serving**: Express server serves built static files in production
- **Single Entry Point**: All traffic goes through Express server (port 3001)

### Development Workflow
1. **Always use the automated command**: `cd saas-panda/server-panda && ./dev-simple.sh`
2. **Never run servers individually** unless specifically debugging
3. **All development happens through**: http://localhost:3001
4. **API endpoints available at**: http://localhost:3001/api
5. **React app accessible at**: http://localhost:3001/app

### File Organization Guidelines
- **Shared types**: Place in `server-panda/src/types/` if used by API
- **React components**: Place in `client-panda/src/components/`
- **Astro pages**: Place in `landing-panda/src/pages/`
- **API routes**: Place in `server-panda/src/routes/`

### Code Style Guidelines
- **TypeScript**: Strict mode enabled across all projects
- **CSS Modules**: Used in client-panda for component styling
- **Base UI**: Radix UI components wrapped in client-panda
- **ESLint**: Configured with TypeScript rules for all projects

### Testing Requirements
- **Write tests first** (TDD approach)
- **Test API endpoints** before implementing frontend
- **Test React components** with user interactions
- **Verify proxy routing** works correctly

### Deployment Guidelines
- **Build command**: `bun run build:ui` (builds both frontend apps)
- **Deployment**: All apps deploy together via `fly deploy`
- **Environment vars**: Configure in Fly.io dashboard
- **Database**: PostgreSQL with Drizzle ORM

### Common Development Tasks

#### Adding a New API Endpoint
1. Add route to `server-panda/src/routes/api.ts`
2. Test with curl or Postman
3. Add TypeScript types if needed
4. Update client-panda to consume the API

#### Adding a New React Component
1. Create in `client-panda/src/components/ComponentName/`
2. Include CSS module file
3. Export from component index
4. Write basic tests

#### Adding a New Astro Page
1. Create in `landing-panda/src/pages/`
2. Use consistent layout from existing pages
3. Test responsive design
4. Verify navigation works

### Security Considerations
- **CORS**: Configured in server security middleware
- **Rate Limiting**: Enabled on all API routes
- **Helmet**: Security headers configured
- **Input Validation**: Required on all API endpoints

### Performance Guidelines
- **Bundle Size**: Monitor with Vite build output
- **Image Optimization**: Use Astro image optimization
- **Caching**: Leverage Express static file caching
- **Database**: Use connection pooling

### Troubleshooting Common Issues
1. **Port conflicts**: Use `./dev-simple.sh` to auto-cleanup
2. **Proxy errors**: Check that all three servers are running
3. **Build failures**: Ensure all TypeScript errors are resolved
4. **CORS issues**: Verify security middleware configuration

### Development Best Practices
- **Incremental changes**: Test each change individually
- **Commit frequently**: Small, focused commits
- **Update scratchpad**: Document progress and decisions
- **Ask for clarification**: When requirements are unclear
- **Verify manually**: Always test in browser after changes
